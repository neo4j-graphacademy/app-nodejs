diff --git a/src/services/movie.service.js b/src/services/movie.service.js
index afe4678..e303981 100644
--- a/src/services/movie.service.js
+++ b/src/services/movie.service.js
@@ -46,17 +46,22 @@ export default class MovieService {
     // tag::allcypher[]
     // Execute a query in a new Read Transaction
     const res = await session.executeRead(
-      tx => tx.run(
-        `
-          MATCH (m:Movie)
-          WHERE m.\`${sort}\` IS NOT NULL
-          RETURN m {
-            .*
-          } AS movie
-          ORDER BY m.\`${sort}\` ${order}
-          SKIP $skip
-          LIMIT $limit
-        `, { skip: int(skip), limit: int(limit) })
+      async tx => {
+        const favorites = await this.getUserFavorites(tx, userId)
+
+        return tx.run(
+          `
+            MATCH (m:Movie)
+            WHERE m.\`${sort}\` IS NOT NULL
+            RETURN m {
+              .*,
+              favorite: m.tmdbId IN $favorites
+            } AS movie
+            ORDER BY m.\`${sort}\` ${order}
+            SKIP $skip
+            LIMIT $limit
+          `, { skip: int(skip), limit: int(limit), favorites })
+      }
     )
     // end::allcypher[]
 
@@ -231,7 +236,23 @@ export default class MovieService {
    */
   // tag::getUserFavorites[]
   async getUserFavorites(tx, userId) {
-    return []
+    // If userId is not defined, return an empty array
+    if ( userId === undefined ) {
+      return []
+    }
+
+    const favoriteResult = await tx.run(
+      `
+        MATCH (:User {userId: $userId})-[:HAS_FAVORITE]->(m)
+        RETURN m.tmdbId AS id
+      `,
+      { userId, }
+    )
+
+    // Extract the `id` value returned by the cypher query
+    return favoriteResult.records.map(
+      row => row.get('id')
+    )
   }
   // end::getUserFavorites[]
 
