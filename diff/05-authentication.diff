diff --git a/src/services/auth.service.js b/src/services/auth.service.js
index 874f4e9..41ce340 100644
--- a/src/services/auth.service.js
+++ b/src/services/auth.service.js
@@ -125,17 +125,50 @@ export default class AuthService {
    */
   // tag::authenticate[]
   async authenticate(email, unencryptedPassword) {
-    // TODO: Authenticate the user from the database
-    if (email === 'graphacademy@neo4j.com' && unencryptedPassword === 'letmein') {
-      const { password, ...claims } = user.properties
+    // Open a new session
+    const session = this.driver.session()
 
-      return {
-        ...claims,
-        token: jwt.sign(claims, JWT_SECRET)
-      }
+    // tag::query[]
+    // Find the user node within a Read Transaction
+    const res = await session.executeRead(
+      tx => tx.run(
+        'MATCH (u:User {email: $email}) RETURN u',
+        { email }
+      )
+    )
+    // end::query[]
+
+    // Close the session
+    await session.close()
+
+    // tag::norecords[]
+    // Verify the user exists
+    if ( res.records.length === 0 ) {
+      return false
     }
+    // end::norecords[]
 
-    return false
+    // tag::password[]
+    // Compare Passwords
+    const user = res.records[0].get('u')
+    const encryptedPassword = user.properties.password
+
+    const correct = await compare(unencryptedPassword, encryptedPassword)
+
+    if ( correct === false ) {
+      return false
+    }
+    // end::password[]
+
+    // tag::extractreturn[]
+    // Return User Details
+    const { password, ...safeProperties } = user.properties
+
+    return {
+      ...safeProperties,
+      token: jwt.sign(this.userToClaims(safeProperties), JWT_SECRET),
+    }
+    // end::extract[]
   }
   // end::authenticate[]
 
